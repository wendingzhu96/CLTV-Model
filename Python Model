# -*- coding: utf-8 -*-
"""
Created on Fri Jul 16 10:19:06 2021

@author: wendingzhu
"""

#import modules
import pandas as pd # for dataframes
import matplotlib.pyplot as plt # for plotting graphs
import seaborn as sns # for plotting graphs
import datetime as dt
import numpy as np

data = pd.read_excel(r'G:\USR_DATA\WendingZhu\GitHub\CLTV\Online Retail.xlsx')

print(data.head())

filtered_data=data[['Country','CustomerID']].drop_duplicates()

filtered_data.Country.value_counts()[:10].plot(kind='bar')

uk_data=data[data.Country=='United Kingdom']
uk_data.info()

uk_data.describe()

uk_data = uk_data[(uk_data['Quantity']>0)]
uk_data.info()

uk_data=uk_data[['CustomerID','InvoiceDate','InvoiceNo','Quantity','UnitPrice']]

#Calulate total purchase
uk_data['TotalPurchase'] = uk_data['Quantity'] * uk_data['UnitPrice']

#Calculate the number of days between the present date and the date of last purchase from each customer.
#Calculate the number of orders for each customer.
#Calculate sum of purchase price for each customer.
uk_data_group=uk_data.groupby('CustomerID').agg({'InvoiceDate': lambda date: (date.max() - date.min()).days,
                                        'InvoiceNo': lambda num: len(num),
                                        'Quantity': lambda quant: quant.sum(),
                                        'TotalPurchase': lambda price: price.sum()})

uk_data_group.head()

uk_data_group.columns=['num_days','num_transactions','num_units','spent_money']
uk_data_group.head()

#CLTV = ((Average Order Value x Purchase Frequency)/Churn Rate) x Profit margin.

#Customer Value = Average Order Value * Purchase Frequency
 
 # Average Order Value
uk_data_group['avg_order_value']=uk_data_group['spent_money']/uk_data_group['num_transactions']

#Purchase frequency
purchase_frequency=sum(uk_data_group['num_transactions'])/uk_data_group.shape[0]

# Repeat Rate, how many customers made more than 1 transaction
repeat_rate=uk_data_group[uk_data_group.num_transactions > 1].shape[0]/uk_data_group.shape[0]

churn_rate=1-repeat_rate

purchase_frequency,repeat_rate,churn_rate

# Profit Margin, assume 5% profit
uk_data_group['profit_margin']=uk_data_group['spent_money']*0.05
uk_data_group.head()

#CLTV = ((Average Order Value x Purchase Frequency)/Churn Rate) x Profit margin.
# Customer Value
uk_data_group['CLV']=(uk_data_group['avg_order_value']*purchase_frequency)/churn_rate

#Customer Lifetime Value
uk_data_group['cust_lifetime_value']=uk_data_group['CLV']*uk_data_group['profit_margin']
uk_data_group.head()

uk_data.head()

uk_data['month_yr'] = uk_data['InvoiceDate'].apply(lambda x: x.strftime('%b-%Y'))
uk_data.head()

#The pivot table takes the columns as input, and groups the entries into a 
#two-dimensional table in such a way that provides a multidimensional summarization of the data.

sale=uk_data.pivot_table(index=['CustomerID'],columns=['month_yr'],values='TotalPurchase',aggfunc='sum',fill_value=0).reset_index()
sale.head()

#sum all month sales
sale['CLV']=sale.iloc[:,2:].sum(axis=1)
sale.head()

#Select most recent 6 months as independent
X=sale[['Dec-2011','Nov-2011', 'Oct-2011','Sep-2011','Aug-2011','Jul-2011']]
y=sale[['CLV']]

#split dataset by using function train_test_split(). You need to pass 3 parameters 
#features, target, and test_set size. Additionally, you can use random_state as 
#a seed value to maintain reproducibility, which means whenever you split the 
#data will not affect the results. Also, if random_state is None, then random 
#number generator uses np.random for selecting records randomly. It means If you don't set a seed, it is different each time.

#split training set and test set, default 25% test, 75% train
from sklearn.model_selection import train_test_split
#from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y,random_state=0)

# import model
from sklearn.linear_model import LinearRegression

# instantiate
linreg = LinearRegression()

# fit the model to the training data (learn the coefficients)
linreg.fit(X_train, y_train)

# make predictions on the testing set
y_pred = linreg.predict(X_test)
# print the intercept and coefficients
print(linreg.intercept_)
print(linreg.coef_)

#Model Accuracy
from sklearn import metrics

# compute the R Square for model
print("R-Square:",metrics.r2_score(y_test, y_pred))

# calculate MAE using scikit-learn
print("MAE:",metrics.mean_absolute_error(y_test,y_pred))

#calculate mean squared error
print("MSE",metrics.mean_squared_error(y_test, y_pred))
# compute the RMSE of our predictions
print("RMSE:",np.sqrt(metrics.mean_squared_error(y_test, y_pred)))



